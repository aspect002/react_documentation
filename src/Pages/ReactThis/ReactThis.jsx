import React from 'react';
import Typography from '../../Components/Typography/Typography';
import ButtonUp from 'Utils/ButtonUp/ButtonUp';

const ReactThis = () => {
  const exampleText = `React - это… библиотека JavaScript для создания UI (user interface), разработанная командой Facebook, и она уже давно завоевала популярность среди разработчиков по всему миру.
Что делает React таким особенным?
Одной из главных особенностей React является его компонентный подход. React позволяет разбивать пользовательский интерфейс на небольшие, независимые компоненты. Каждый компонент имеет свою логику, состояние и представление, что делает код более организованным и легко поддерживаемым. Ты можешь переиспользовать компоненты, комбинировать их и создавать сложные интерфейсы без лишнего повторения кода.

~История React начинается в 2011 году, когда Facebook столкнулся с проблемой медленной отрисовки своих страниц. Именно тогда был создан первоначальный прототип React. Вскоре после этого Facebook решил сделать React открытым для сообщества разработчиков, и в 2013 году была выпущена первая версия React.

~С тех пор React получил широкую поддержку и активное сообщество разработчиков. Большое количество известных компаний, таких как Instagram, Airbnb, Netflix и WhatsApp, используют React в своих продуктах. Это свидетельствует о том, что React является надежным и проверенным инструментом для создания масштабируемых веб-приложений.

~ Почему стоит выбрать React для своих проектов?

Во-первых, React предлагает простоту и понятность в использовании. Его компонентный подход и декларативный стиль программирования делают разработку более интуитивной, даже для новичков.

Во-вторых, React обеспечивает высокую производительность и эффективность. Благодаря виртуальному DOM и механизму оптимизации обновлений, React способен обрабатывать большие и сложные приложения с минимальными накладными расходами.

Наконец, React имеет большое и активное сообщество разработчиков, готовых поделиться опытом и помочь решить любые проблемы. Ты всегда можешь найти обучающие материалы, документацию и ответы на свои вопросы благодаря поддержке сообщества.

В следующих главах этого учебника ты будешь изучать React более подробно. Будешь создавать компоненты, работать с состоянием, обрабатывать события и многое другое.

ИТОГО:

- React - библиотека JavaScript для создания пользовательских интерфейсов.
- React крут из-за VirtualDOM.
- React гибкий при использовании.
- В React используется компонентный подход.
- React легко интегрируется с другими технологиями и библиотеками.
- React имеет большое сообщество разработчиков и открытый исходный код.

~ Основные понятия и аббревиатуры

~SPA  - Single Page Application - это веб-приложение, которое загружает одну страницу и динамически обновляет ее содержимое при необходимости, без перезагрузки страницы. React как раз и используется для создания SPA.

~CRA - Create React App - это инструмент командной строки для быстрого создания нового проекта React. Он автоматически настраивает новый проект и включает в себя многие инструменты и библиотеки, необходимые для разработки веб-приложений на React.

~JSX - Синтаксис расширения JavaScript, используемый в React для описания структуры пользовательского интерфейса. Он позволяет встраивать код JavaScript в HTML-подобную разметку.

~NPM - Node Package Manager - это менеджер пакетов (библиотек) для JavaScript. NPM используется для управления зависимостями проекта и установки необходимых библиотек. NPM также позволяет разработчикам публиковать свои пакеты и делиться ими с другими разработчиками. Написал свою библиотеку и другие разработчики могут переиспользовать ее. Круто же)

~WEB-интерфейс  - это способ взаимодействия пользователя с веб-приложением. Он представляет собой совокупность элементов и функциональности, которые пользователь может видеть и использовать на веб-странице.

~UI - User Interface - это термин, который используется в контексте разработки программного обеспечения и означает интерфейс пользователя. Он представляет собой то, через что мы взаимодействуем с приложением или сайтом.

~Библиотека - это набор готовых функций и инструментов, которые мы можем использовать в своей программе по своему усмотрению.

~Фреймворк - это структура и правила, которые определяют, как мы должны организовывать свое приложение. Фреймворк контролирует поток выполнения вашего кода.

Основное отличие между ними заключается в том, что с библиотекой мы контролируем поток выполнения, вызывая функции по своему усмотрению, а с фреймворком поток выполнения контролируется самим фреймворком, и мы пишем код, который вызывается фреймворком.

~Еще одно отличие заключается в том, что фреймворк предоставляет более высокий уровень абстракции и имеет более строгие правила, в то время как библиотека предоставляет отдельные функции для выполнения конкретных задач и дает нам большую свободу выбора.

~CRUD - это аббревиатура, которая означает "Создание" (Create), "Чтение" (Read), "Обновление" (Update) и "Удаление" (Delete). Это основные операции, которые можно выполнять с данными в базах данных или приложениях. Им соответствуют HTTP-методы:

~Create → POST

Read → GET

Update → PUT

Delete → DELETE


  `;
  return (
    <div>
      <div id="top" style={{ position: 'relative', top: 0 }}></div>
        <Typography title="React - это...">
            {exampleText}
        </Typography>
        <ButtonUp />
    </div>
);
};

export default ReactThis;
