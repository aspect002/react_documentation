
import React from "react";
import Typography from "../../Components/Typography/Typography";
import ButtonUp from 'Utils/ButtonUp/ButtonUp';
const Storages = () => {
  const exampleText =`

  Local Storage - это механизм, который позволяет веб-приложениям сохранять данные локально в браузере. Это означает, что данные будут сохранены после закрытия браузера и перезагрузки страницы.

  LocalStorage может быть использован для хранения различных типов данных, таких как строки, числа, булевы значения и объекты. Он может быть полезен для хранения пользовательских настроек *(например темная тема на сайте)*, предпочтений пользователя и других данных, которые могут быть использованы для персонализации пользовательского опыта.

  Для записи данных в LocalStorage можно использовать localStorage объекта window в JavaScript. Например, чтобы записать строку "Hello, Redev!" в LocalStorage, можно использовать:

  \`\`\`
  localStorage.setItem('myData', 'Hello, Redev!');
  \`\`\`

  В этом примере мы записываем строку "Hello, Redev!" в LocalStorage с ключом "myData".

  ~Чтобы получить данные из LocalStorage, можно использовать метод getItem() объекта localStorage. Например, чтобы получить значение, которое мы только что записали, можно использовать следующий код:
  \`\`\`
  const myData = localStorage.getItem('myData');
  console.log(myData);  Выводится "Hello, Redev!"
  \`\`\`

  ~В этом примере мы получаем значение из LocalStorage с ключом "myData" и записываем его в переменную myData.
  ~Обрати внимание, что данные в LocalStorage хранятся в виде строк. При необходимости данные могут быть преобразованы в другие типы данных с помощью методов JavaScript, например parseInt() или JSON.parse().
  ~LocalStorage является безопасным механизмом хранения данных, поскольку данные сохраняются локально на компьютере пользователя и не передаются на сервер. Это также означает, что данные хранятся в пределах ограниченного объема памяти, доступного для браузера.
  Использование LocalStorage может улучшить пользовательский опыт, позволяя сохранять данные между визитами на сайт.

   ~Использование Cookies в React приложениях: Хранилище состояния и работа с ним

  Cookies - это небольшие текстовые файлы, которые веб-сайты отправляют и хранят на компьютере пользователя через его веб-браузер. Они представляют собой удобный механизм для хранения небольших данных, связанных с пользователем и веб-сайтом. В контексте React приложений, cookies могут быть использованы для сохранения состояния приложения и обеспечения персонализации.

   ~Зачем нужно хранилище в виде Cookies?

  1. Сохранение состояния: Cookies позволяют хранить небольшие объемы данных, такие как пользовательские настройки, предпочтения, идентификаторы сессий и другие данные, которые нужно сохранить между различными запросами или сеансами пользователей.
  2. Аутентификация и авторизация: Cookies могут использоваться для хранения токенов аутентификации, позволяя пользователю оставаться аутентифицированным в приложении даже после перезапуска браузера.
  3. Персонализация и отслеживание: Cookies могут использоваться для анализа поведения пользователя на сайте и предоставления персонализированного опыта. Например, рекомендации товаров, основанные на предыдущих покупках.




   ~Отличие от LocalStorage

  Local Storage и Cookies - это два разных механизма хранения данных на стороне клиента, и у них есть несколько ключевых различий:

  1. Емкость данных: Cookies могут содержать до 4KB данных, в то время как Local Storage позволяет хранить около 5MB данных.
  2. Срок хранения: Cookies имеют срок хранения, который можно указать, в то время как данные в Local Storage хранятся неограниченное время, пока их явно не удалить.
  3. !!!Передача данных!!!: Cookies автоматически включаются в заголовки каждого HTTP-запроса к определенному домену, что делает их более подходящими для некоторых сценариев, таких как авторизация. Local Storage данные не автоматически передаются с каждым запросом.

   Работа с Cookies в React

  ~В React приложениях можно работать с cookies, используя JavaScript API для работы с ними или же библиотеку https:www.npmjs.com/package/cookie.

  ~Вот как осуществляется базовая работа:



   Установка Cookie:

   \`\`\`
   Установка cookie на определенное количество дней
  document.cookie = "user_id=123; expires=Fri, 31 Dec 2023 23:59:59 GMT; path=/";
  \`\`\`

   ~Получение Cookie:

   Получение всех cookie в виде строки
   \`\`\`
  const allCookies = document.cookie;
  \`\`\`
   Разбивка строки на отдельные cookie
   \`\`\`
  const cookiesArray = allCookies.split("; ");
  const cookies = {};
  cookiesArray.forEach(cookie => {
    const [name, value] = cookie.split("=");
    cookies[name] = value;
  });
  \`\`\`

  Удаление Cookie:
   Удаление cookie путем установки срока действия в прошлое
   \`\`\`
  document.cookie = "user_id=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
  \`\`\`

  ~Заключение



  ~Cookies - это удобный механизм хранения небольших данных на стороне клиента, который можно использовать в React приложениях для сохранения состояния, аутентификации и персонализации. Однако стоит помнить о его ограничениях, таких как ограниченный объем данных и срок хранения. При выборе между Cookies и Local Storage важно учитывать конкретные требования вашего приложения и его функциональности.


  ~~Session Storage - это еще один механизм хранения данных в браузере, который работает так же, как и LocalStorage. Однако Session Storage имеет ряд отличий от LocalStorage.

  Session Storage сохраняет данные только на время сеанса браузера. Это означает, что данные будут удалены после закрытия браузера или вкладки. Это может быть полезно для хранения временных данных, таких как формы, которые не нужно сохранять после закрытия браузера.

  ~Кроме того, Session Storage имеет более ограниченный объем хранения данных, чем LocalStorage. Это означает, что он может быть полезен для хранения небольших объемов данных, которые нужно сохранить только на время сеанса браузера.

   СИНТАКСИС ТАКОЙ ЖЕ КАК И У LocalStorage

  ~Чтобы записать данные в Session Storage, можно использовать объект sessionStorage в JavaScript. Например, чтобы записать строку "Hello, Redev!" в Session Storage, можно использовать:


  \`\`\`
  sessionStorage.setItem('myData', 'Hello, Redev!');
  \`\`\`

  В этом примере мы записываем строку "Hello, Redev!" в Session Storage с ключом "myData".
  Чтобы получить данные из Session Storage, можно использовать метод getItem() объекта sessionStorage. Например, чтобы получить значение, которое мы только что записали, можно использовать следующий код:
  \`\`\`
  const myData = sessionStorage.getItem('myData');
  console.log(myData);  Выводится "Hello, Redev!"
  \`\`\`

  В этом примере мы получаем значение из Session Storage с ключом "myData" и записываем его в переменную myData.
  Обрати внимание, что данные в Session Storage также хранятся в виде строк. При необходимости данные могут быть преобразованы в другие типы данных с помощью методов JavaScript, например parseInt() или JSON.parse().
  Использование Session Storage может помочь улучшить пользовательский опыт, позволяя сохранять временные данные между переходами на разные страницы сайта.


  ~~localForage - это JavaScript-библиотека, предоставляющая удобный асинхронный интерфейс для работы с локальными хранилищами в браузерах. Эта библиотека позволяет сохранять данные в браузере пользователя, используя различные хранилища, такие как IndexedDB, WebSQL и localStorage, в зависимости от поддержки браузера.

  ~Установка localForage

  Ссылка на описание → https:www.npmjs.com/package/localforage

  ~Прежде чем начать использовать localForage, необходимо установить эту библиотеку в  проекте на React. Выполни следующую команду:

  \`\`\`
  npm install localforage
  \`\`\`

  ~Использование localForage в React

  Давайте представим, что у нас есть React-приложение, в котором мы хотим сохранить и извлечь пользовательские настройки. Для начала импортируем localForage в нашем компоненте:
  \`\`\`
  import localforage from 'localforage';
  \`\`\`


  ~Теперь мы готовы начать работу с локальным хранилищем. Допустим, мы хотим сохранить и извлечь язык, выбранный пользователем:

  \`\`\`
  import React, { useState, useEffect } from 'react';

  const App = () => {
    const [selectedLanguage, setSelectedLanguage] = useState('');

    useEffect(() => {
       Извлекаем сохраненный язык при загрузке компонента
      localforage.getItem('language').then(language => {
        if (language) {
          setSelectedLanguage(language);
        }
      });
    }, []);

    const handleLanguageChange = (language) => {
       Сохраняем выбранный язык в локальном хранилище
      localforage.setItem('language', language).then(() => {
        setSelectedLanguage(language);
      });
    };

    return (
      <>
        <h1>Настройки</h1>
        <select value={selectedLanguage} onChange={(e) => handleLanguageChange(e.target.value)}>
          <option value="en">Английский</option>
          <option value="fr">Французский</option>
          <option value="es">Испанский</option>
        </select>
      </>
    );
  };
  export default App;
\`\`\`

  Эта библиотека позволяет асинхронно сохранять и извлекать данные из различных хранилищ, обеспечивая более эффективное управление данными на стороне клиента. Работа с localForage интуитивно понятна и удобна для сохранения пользовательских настроек, кэширования данных и других задач, требующих локального хранения данных.





`
  return (
    <div>
      <div id="top" style={{ position: 'relative', top: 0 }}></div>

        <Typography title="Storages">
            {exampleText}
        </Typography>
        <ButtonUp />
    </div>
);
};

export default Storages;
